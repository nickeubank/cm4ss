{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Ways To Store and Read Data\n",
    "\n",
    "Central to the life of the data scientist is, well, data! At this point you are already well on your way to being an expert in manipulating data once you have loaded it into Python, but we haven't talked much about the various formats in which data may be given to you as files. \n",
    "\n",
    "So in this reading and the next, we will talk about the two main families of data files you are likely to encounter, their pros and their cons, and how to work with them. These two families are:\n",
    "\n",
    "1. Plaintext files: files that store data as text. These are files that you could easily open up in a text editor and read yourself, making them very flexible and robust.\n",
    "2. Binary files: files that have processed your data prior to storage. Reading and writing data from these files tends to be faster, and these files will tend to take up less space on your computer, but you can't easily open them up and look at them, and you need the right software to access them.\n",
    "\n",
    "Below is an introduction to both Plaintext and Binary file formats, as well as an overview of how to work with them and considerations for which to use. **Don't worry about trying to memorize everything that follows, however!** The world of data formats is kinda like a zoo, and if you try and memorize every fact on the plaques in front of every exhibit you'll go insane. Instead, the goal is to give you a sense of what's out there and to make sure you understand the two big types of data files (plaintext and binary) you may come across. For all the specifics, our goal is just to give you enough familiarity that you know what to Google when you come across these files on the wild!\n",
    "\n",
    "## Plaintext Files\n",
    "\n",
    "For all the advancements that have been made in sophisticated data storage formats, plaintext files remain the most common data format you are likely to encounter. That's because plaintext file store data as—as the name suggests—plain text! As a result there is very little that can go wrong with data stored in this format—any computer that knows how to read a text file can open plaintext data, meaning no one has to worry about whether future data users or colleagues will have the right version of the right software to read the data. \n",
    "\n",
    "Indeed, nearly all of the data that we've used has been stored in plaintext files. For example, here's the file of US Income Data called `us_household_incomes.txt` we used previously, where `.txt` is a file suffix that just tells the computer the file is a \"text\" file. Indeed, if I open up the file in a text editor (instead of trying to read it into R), it looks like this:\n",
    "\n",
    "![US Household Incomes Opened As Text](images/us_household_incomes_as_text.png)\n",
    "\n",
    "Note both that the contents are easily readable—each line is the income of a single house that, when read into R, becomes one entry in a vector—and also that R Studio recognizes it as Plain Text, and displays that in the bottom right.\n",
    "\n",
    "And what exactly does it mean that the file can be opened in any text editor and read? It means that at the level of the 1s and 0s that make up the file, numbers and letters are encoded using simple, commonly used encodings (like [ASCII](https://en.wikipedia.org/wiki/ASCII) or [Unicode](https://en.wikipedia.org/wiki/Unicode). These files also do not contain anything complicated (pictures, media, etc.), and in fact don't even include information like fonts, or formatting. \n",
    "\n",
    "This simplicity makes plaintext files (nearly) universally compatible, and easy to work with, so are a favorite of programmers. Indeed, any code you've ever written in a file has almost surely been saved as a plaintext file too!\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tabular Plaintext Data\n",
    "\n",
    "When it comes to the type of tabular data that we are working with in this course (data organized into rows and columns), there are two main plaintext formats, and a handful of descendants to be aware of:\n",
    "\n",
    "- **Comma Separated Values** (CSVs): plaintext files that use the file suffix `.csv`. In these files, each row of text represents one row in the data, and columns are separated by commas. \n",
    "- **Tab Separated Values** (TSVs): plaintext files that usually use the file suffix `.txt` or, less commonly, `.tsv`. In these files, each row of text represents one row in the data, and columns are separated by tabs (the special character denoting an indentation).\n",
    "- **Plaintext tabular data with other separators:** In addition to these two formats, one *can* also create plaintext tabular files using basically any character to separate the columns, such as semi-colons, spaces, or anything else. These are a little bit unusual, but since it's possible you will come across them in life we just wanted to mention that they exist! Note that there is no standard file suffix when using these other separators, so these types of files will just end up with a `.csv` or `.txt` file suffix.\n",
    "\n",
    "Of these, CSVs are by far the most used, in part I suspect because tabs are often an invisible character, sometimes making it hard to see where one column ends and the next ends when looking at the file as text. A small CSV, by contrast, can be pretty easy to read (or at least get a sense of). Here, for example, is what a small CSV file looks like when I open it in a text editor:\n",
    "\n",
    "![Small CSV in VS Code](images/world_v_small.png)\n",
    "\n",
    "Across the top are our column names, and each row below contains one row of data (one observation). Note that unlike in, say, Excel, the columns of a CSV won't necessarily line up (unless by chance all the entries in a column are of the same size). \n",
    "\n",
    "Moreover, in CSVs, you will notice that entries in columns that are meant to be read as text will often—though not always—be enclosed in quotation marks (in this CSV, the second column uses quotation marks but the first does not, despite both being text). In theory you don't need them, but if you have data—like names written `LAST NAME, FIRST NAME`—that contain commas in the data itself, the quotation marks are required so your computer knows which commas separate columns and which are data.\n",
    "\n",
    "And indeed, if we wanted to read this into R, we could do so easily with `read.csv`, and we'd get the table we expect!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "vscode": {
     "languageId": "r"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"dataframe\">\n",
       "<caption>A data.frame: 6 x 4</caption>\n",
       "<thead>\n",
       "\t<tr><th scope=col>country</th><th scope=col>region</th><th scope=col>gdppcap08</th><th scope=col>polityIV</th></tr>\n",
       "\t<tr><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;chr&gt;</th><th scope=col>&lt;int&gt;</th><th scope=col>&lt;int&gt;</th></tr>\n",
       "</thead>\n",
       "<tbody>\n",
       "\t<tr><td>Brazil    </td><td>S. America</td><td>10296</td><td>18</td></tr>\n",
       "\t<tr><td>Germany   </td><td>W. Europe </td><td>35613</td><td>20</td></tr>\n",
       "\t<tr><td>Mexico    </td><td>N. America</td><td>14495</td><td>18</td></tr>\n",
       "\t<tr><td>Mozambique</td><td>Africa    </td><td>  855</td><td>16</td></tr>\n",
       "\t<tr><td><span style=white-space:pre-wrap>Russia    </span></td><td>C&amp;E Europe</td><td>16139</td><td>17</td></tr>\n",
       "\t<tr><td><span style=white-space:pre-wrap>Ukraine   </span></td><td>C&amp;E Europe</td><td> 7271</td><td>16</td></tr>\n",
       "</tbody>\n",
       "</table>\n"
      ],
      "text/latex": [
       "A data.frame: 6 x 4\n",
       "\\begin{tabular}{llll}\n",
       " country & region & gdppcap08 & polityIV\\\\\n",
       " <chr> & <chr> & <int> & <int>\\\\\n",
       "\\hline\n",
       "\t Brazil     & S. America & 10296 & 18\\\\\n",
       "\t Germany    & W. Europe  & 35613 & 20\\\\\n",
       "\t Mexico     & N. America & 14495 & 18\\\\\n",
       "\t Mozambique & Africa     &   855 & 16\\\\\n",
       "\t Russia     & C\\&E Europe & 16139 & 17\\\\\n",
       "\t Ukraine    & C\\&E Europe &  7271 & 16\\\\\n",
       "\\end{tabular}\n"
      ],
      "text/markdown": [
       "\n",
       "A data.frame: 6 x 4\n",
       "\n",
       "| country &lt;chr&gt; | region &lt;chr&gt; | gdppcap08 &lt;int&gt; | polityIV &lt;int&gt; |\n",
       "|---|---|---|---|\n",
       "| Brazil     | S. America | 10296 | 18 |\n",
       "| Germany    | W. Europe  | 35613 | 20 |\n",
       "| Mexico     | N. America | 14495 | 18 |\n",
       "| Mozambique | Africa     |   855 | 16 |\n",
       "| Russia     | C&amp;E Europe | 16139 | 17 |\n",
       "| Ukraine    | C&amp;E Europe |  7271 | 16 |\n",
       "\n"
      ],
      "text/plain": [
       "  country    region     gdppcap08 polityIV\n",
       "1 Brazil     S. America 10296     18      \n",
       "2 Germany    W. Europe  35613     20      \n",
       "3 Mexico     N. America 14495     18      \n",
       "4 Mozambique Africa       855     16      \n",
       "5 Russia     C&E Europe 16139     17      \n",
       "6 Ukraine    C&E Europe  7271     16      "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "read.csv(\"data/world-very-small.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Import and Exporting Plaintext Tabular Data\n",
    "\n",
    "Another really good news: pandas makes working with all of these forms of tabular data trivially easy! Here's all you need to read or write these different types of tabular data:\n",
    "\n",
    "**Reading:**\n",
    "\n",
    "- **Read a CSV:** `read.csv(\"path/to/file.csv\")`\n",
    "- **Read a TSV:** `read.csv(\"path/to/file.txt\", sep=\"\\t\")`. Note this is still `read.csv`, just now with `\\t` specified as the separator. Indeed, you can load any [symbol] Separated Value plaintext file with `read.csv`, just change out the `sep` argument!\n",
    "\n",
    "**Writing:**\n",
    "\n",
    "- **Write a CSV:** `write.csv(\"path/to/file.csv\")`\n",
    "- **Write a TSV:** `write.csv(\"path/to/file.csv\", sep=\"\\t\")`\n",
    "\n",
    "And that's really all there is to it for most files! \n",
    "\n",
    "Or... it should be. But from time you'll run into odd formatting issues, or dates stored oddly, or strange character, or other anomalies. If that does happen to you, however, should be aware of is that the pandas `read.csv` function is one of **the** most impressive functions you will find anywhere in the csv ecosystem in terms of the number of inbuilt utilities it offers. And to see that, all you have to do is look at the function documentation. Seriously, just type `?read.csv` in R to see all it's options! "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "codemirror_mode": "r",
   "file_extension": ".r",
   "mimetype": "text/x-r-source",
   "name": "R",
   "pygments_lexer": "r",
   "version": "4.3.1"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "3e0a5228cb9726a24d36227c69ed0d3aac98cecda769d1c9adb080711d57f90d"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
