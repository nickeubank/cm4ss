{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Introduction to R\n",
    "\n",
    "In this first in a number of tutorials, we'll cover the very basics of R. If you've programmed before you can skip much of this. But regardless of your background, we hope you'll find this and subsequent tutorials useful for learning R's many tools for graphing, statistical analysis, and data collection and management --- or what we collectively might call \"data science.\" \n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Installing R\n",
    "\n",
    "Everything we do in this course will be doing using the *free!* open-source programming language R. \n",
    "\n",
    "But the way we'll mostly *use* R is using a program called [RStudio](https://www.rstudio.com/). RStudio is a \"helper\" program that makes it easier to work with R (it is what is referred to as an \"editor\" or \"integrated development environment\" (IDE)). When you're working in RStudio, all the code you run is being run by R itself, but RStudio provides tools to make it easier to see what R is doing, to organize the code your write to run in R, to look at plots R generates, etc. In other words, you don't need RStudio to use R (some people use other editors, like VS Code), but you definitely need R to run RStudio, any code you write in RStudio will work anywhere R is available. \n",
    "\n",
    "For an installation tutorial and introduction to R functionality, please [**go watch this video**](https://www.youtube.com/watch?v=ulIv0NiVTs4)."
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Code Examples On This Site\n",
    "\n",
    "On this website, you'll find that code examples don't look quite like they do when you're typing in R yourself. Instead, you'll see code appear in grey blocks with a number on the left side. Below these blocks, you will see the output R has returned after running that code. For example, here's that same `\"Hello!\"` line in the style used on this site:"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "source": [
    "\"Hello!\""
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] \"Hello!\""
      ],
      "text/markdown": [
       "'Hello!'"
      ],
      "text/latex": [
       "'Hello!'"
      ],
      "text/html": [
       "'Hello!'"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "In addition, some code will include \"comments\". Comments are notes placed in someone's code to explain what's going on to other programmers. Comments always start with a `#` in R, which tells R that the text that follows is not something it should try and execute. Comments will always appear in italics and in a different color. "
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "source": [
    "# This is a comment. In the next line, I'll add 2 and 3.\n",
    "2 + 3"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 5"
      ],
      "text/markdown": [
       "5"
      ],
      "text/latex": [
       "5"
      ],
      "text/html": [
       "5"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Basic Math in R\n",
    "\n",
    "Now that we've learned how to pass commands to R, we can start asking R to do things for us. For example, R can do all the normal math operations you are familiar with:"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "source": [
    "# Addition\n",
    "2 + 2"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 4"
      ],
      "text/markdown": [
       "4"
      ],
      "text/latex": [
       "4"
      ],
      "text/html": [
       "4"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "source": [
    "# Multiplication\n",
    "2 * 3"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 6"
      ],
      "text/markdown": [
       "6"
      ],
      "text/latex": [
       "6"
      ],
      "text/html": [
       "6"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "source": [
    "# Division\n",
    "4 / 2"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 2"
      ],
      "text/markdown": [
       "2"
      ],
      "text/latex": [
       "2"
      ],
      "text/html": [
       "2"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "source": [
    "# And even exponentiation (e.g. 2 raised to the third power)\n",
    "2 ^ 3"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 8"
      ],
      "text/markdown": [
       "8"
      ],
      "text/latex": [
       "8"
      ],
      "text/html": [
       "8"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "source": [
    "# R can also do logical comparisons\n",
    "5 < 7"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] TRUE"
      ],
      "text/markdown": [
       "TRUE"
      ],
      "text/latex": [
       "TRUE"
      ],
      "text/html": [
       "TRUE"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "source": [
    "3 >= 5"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] FALSE"
      ],
      "text/markdown": [
       "FALSE"
      ],
      "text/latex": [
       "FALSE"
      ],
      "text/html": [
       "FALSE"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Variables\n",
    "\n",
    "Congratulations! You now know how to do math in R!\n",
    "\n",
    "If we want to do more than use R as a calculator, though, we need to be able to not only do math problems, but also store the results of our calculations so we can reuse them in the future, or combine the results of lots of different calculations. In the examples above, R did the math we asked it to do, and printed out the results, but it didn't keep a copy of those results anywhere.\n",
    "\n",
    "In order to store the *value* of our calculations, we need to *assign them to a variable*. OK, but what does that actually mean?\n",
    "\n",
    "If you’d done any programming before, you probably have an implicit notion of a variable and assignment, but in this course we’d like to provide you with an explicit metaphor we’ll keep coming back to: **a variable is a box that holds a value**. So when we assign the value of 6 to the variable `a`, we’re really saying \"put `6` in the box `a`.\"\n",
    "\n",
    "To illustrate, let's walk through a few lines of code and illustrate what's going in pictures on the right. \n",
    "\n",
    "Here, in the first line, we're assigning the value of `6` to `a`, so as we see R is putting a `6` in the box labelled `a`. \n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "![reading_assignment_1](images/reading_assignment_1.png)\n",
    "\n",
    "Then R does the same thing with `b`, putting the assigned value of `7` in a box named `b`. \n",
    "\n",
    "![reading_assignment_2](images/reading_assignment_2.png)\n",
    "\n",
    "Now things get a little more interesting. Instead of a single value being assigned to a variable, we now have an expression. The way R handles this is by first evaluating the expression on the right side of the assignment operator (`<-`), *then* assigning it to the variable. \n",
    "\n",
    "Note there's something a little weird about this: even though most of us are used to reading from left-to-right, does the opposite, evaluating the expression on the right *first*, *then* assigning it to the variable on the left. \n",
    "\n",
    "![reading_assignment_3](images/reading_assignment_3.png)\n",
    "\n",
    "Finally, we see an example of re-assignment -- here a new value is assigned to `a` (`2`), and that value *overwrites* the old value that was in the box `a`. The old value (`6`) has been lost by this re-assignment, it's job done. \n",
    "\n",
    "![reading_assignment_4](images/reading_assignment_4.png)"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "And that's how you can read code by thinking of variables as boxes that store data!\n",
    "\n",
    "Now, if you've done any programming before, this idea of variables as boxes may seem obvious or like an unnecessary metaphor for something you always understood implicitly. But as we will see later in this course when we start working with more complicated structures -- like function -- we will see that this metaphor is extremely powerful.\n",
    "\n",
    "Indeed, this idea of variables as boxes is so fundamental to programming that it's even embodied in RStudio. If you look at the top right corner of RStudio, you'll find a tab called \"Environment\". That tab displays all the variables defined in the current session of R. And if you run the code we just worked through, you'll see that it displays the values of `a`, `b`, and `c` basically the same way we wrote them above: as values in boxes with the variable name next to them as a label! (Don't worry if you don't have that `p` variable in your RStudio -- that's just a variable my R session loads automatically on startup.):\n",
    "\n",
    "![rstudio_variables](images/rstudio_variables.png)"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "<div class=\"alert alert-info\">\n",
    "    \n",
    "<b>NOTE:</b> There are actually <b>two</b> ways to assign a value to a variable name in R.\n",
    "\n",
    "\n",
    "The first, which we will use in these tutorials, is to use a less than sign and a dash to create an arrow (`<-`): \n",
    "\n",
    "`x <- 42`\n",
    "\n",
    "and the second is to use a single equal sign (`=`):\n",
    "\n",
    "`x = 42` \n",
    "\n",
    "When R was first created it only supported the `<-` operator, but most other languages use `=` is the assignment operator, so eventually R decided to support both, so you can use them interchangeably. \n",
    "\n",
    "However, be aware that most style guides for R still suggested that the `<-` operator is the preferred choice (though I will admit that I often just use `=` in my own code... ;)).\n",
    "\n",
    "</div>"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Checking Variable Values\n",
    "\n",
    "One way to see the value of variables is to just look at \"Environment\" tab in RStudio, as shown above. But while this is a nice feature of RStudio -- and sufficient in many cases -- it's good to know how to get the values of variables directly in the R console. \n",
    "\n",
    "There are two ways to see the value of a variable in R:\n",
    "\n",
    "1. Type in the variable name (or any other expression) without assigning it to a variable. \n",
    "2. Use the `print()` statement. \n",
    "\n",
    "The first is what we were actually doing at the top of this document -- if you run a line of code and don't include an assignment to a variable, then R will evaluate the given expression and print out the value in the console. This is true whether the expression is just the name of a variable (`a`, in which case R just prints the value that's been assigned to `a`), or something more complicated (`(a * 123) / 42`): if you don't assign it, the evaluated expression will just get printed out. e.g.:"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "source": [
    "z <- 42\n",
    "z"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 42"
      ],
      "text/markdown": [
       "42"
      ],
      "text/latex": [
       "42"
      ],
      "text/html": [
       "42"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "The second option is to use the `print()` function in R. Basically, any expression you put between the two parenthesis of the print function will get printed out. For simple scripts like what we're writing now, there's rarely a reason to use `print()` instead of typing out the expression you wanted evaluated and printed, but it'll become really useful later when we write some fancier code!"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "source": [
    "print(z)"
   ],
   "outputs": [
    {
     "output_type": "stream",
     "name": "stdout",
     "text": [
      "[1] 42\n"
     ]
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Order of Evaluation\n",
    "\n",
    "As noted above, the way that R evaluates a line of code is by (1) evaluating the expression on the right-hand side of the assignment operator, *then* inserting that value into the box associated with the variable on the left-hand side of the assignment operator. \n",
    "\n",
    "Given that, can you predict what the value of `a` will be after the following code is run?\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "source": [
    "a <- 4\n",
    "a <- a + 1"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "If you said `5`, you'd be right! \n",
    "\n",
    "When the expression on the right-hand side is more complex, R will evaluate it using the same order of operations you learned in high school math ([PEMDAS](https://www.mathsisfun.com/operation-order-pemdas.html)!). So R will parse the following code: "
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "source": [
    "z <- 5 + 2 * (20 - 2)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "By evaluating things in parentheses, then any multiplication/division operations, and then any addition, subtraction operations:\n",
    "```R\n",
    "  5 + 2 * (20 - 2)\n",
    "= 5 + 2 * 18 # Parenthesis evaluated\n",
    "= 5 + 36     # Multiplication evaluated\n",
    "= 41         # Addition evaluated. \n",
    "```\n",
    "\n",
    "**NOT** left-to-right: \n",
    "\n",
    "```R\n",
    "  5 + 2 * (20 - 2)\n",
    "= 7 * (20 - 2)\n",
    "= 7 * 18\n",
    "= 126\n",
    "```\n"
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Functions\n",
    "\n",
    "The last thing to talk about in this reading is perhaps the most important construct in programming: the function!\n",
    "\n",
    "Up until now, we've mostly been doing little mathematical manipulations that you can imagine doing on a calculator. But often times we want to be able to do complicated manipulations of our data without writing out all the steps ourselves, and that's where functions come in.\n",
    "\n",
    "The basic idea of a function is that it is an object that accepts data as an input, does something with that data, and then returns something to you. For example, `sqrt` is a function that calculates the square root of a number. It takes a number as an input (i.e. you put a number in between the two parentheses that follow the function name) and returns the square root of that number:"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "source": [
    "sqrt(9)"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 3"
      ],
      "text/markdown": [
       "3"
      ],
      "text/latex": [
       "3"
      ],
      "text/html": [
       "3"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "How did it just calculate the square root of 9? Here's the magic of functions: you don't have to know! \n",
    "\n",
    "My intro to computer science teacher once said that if took remembered only one thing from his class, we should remember **\"a function is a toaster.\"** OK, stay with me: by that, he meant that just like a toaster, it's not your job to know how a function works; you're only responsible for knowing what you're allowed to put in, and for accepting what it returns. If one day my toaster suddenly changed from heating my bread with electricity to channeling cosmic rays, it wouldn't really change how I interact with the toaster: I put bread in, I get toast back.\n",
    "\n",
    "Now this idea of a toaster taking something in and returning something to you (the \"return value\") is relevant to our discussion of variables and assignment. Just like any other expression, if you ask R to evaluate a line of code with a function in it, and you don't assign that value back to a variable, that return value gets printed out and is then forgotten. So if you want to keep the result of a function, remember you always have to assign it to a variable. e.g."
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "source": [
    "# Let's get the value of 7!\n",
    "# (e.g. 7 x 6 x 5 x 4 x 3 x 2 x 1, also known as 7 factorial)\n",
    "\n",
    "a <- 7\n",
    "a_factorial <- factorial(a)"
   ],
   "outputs": [],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "source": [
    "a_factorial"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 5040"
      ],
      "text/markdown": [
       "5040"
      ],
      "text/latex": [
       "5040"
      ],
      "text/html": [
       "5040"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "It's also important to understand that when functions are nested, just evaluates them from the inside out. For example, can you figure out what this code would return (`abs` returns the absolute value of the input)? \n",
    "\n",
    "```r\n",
    "a <- -9\n",
    "b <- sqrt(abs(a))\n",
    "```\n",
    "\n",
    "?\n",
    "\n",
    "Let's run it and find out:"
   ],
   "metadata": {}
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "source": [
    "a <- -9\n",
    "b <- sqrt(abs(a))\n",
    "b"
   ],
   "outputs": [
    {
     "output_type": "display_data",
     "data": {
      "text/plain": [
       "[1] 3"
      ],
      "text/markdown": [
       "3"
      ],
      "text/latex": [
       "3"
      ],
      "text/html": [
       "3"
      ]
     },
     "metadata": {}
    }
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "Because R evaluates the expression `sqrt(abs(a))` by starting at the innermost level and working it's way out, effectively saying: \"well, `a` is `-9`, so `abs(a)` is `abs(-9)`. And that's `9`. So then `sqrt(9)` is `3`.\""
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "Anyway, we'll talk a LOT more about functions later on in the course, including learning about all the amazing functionality that comes built into R in the form of functions it provides. And by the end of the course you'll even be able to write your own functions! \n",
    "\n",
    "But for now it's enough to know that they're just objects that take inputs, do something, and return an output to you to use (and you need to assign that return value to a variable if you want it remembered!)."
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "And that's it! You now know all the basics of how assignment works in R. Next up, we'll talk about types of data in R.\n",
    "\n",
    "## Where's the Social Science!\n",
    "\n",
    "Don't worry, I promise we'll get to good, applied social science examples very soon! \n",
    "\n",
    "One goal of this course is to ensure that you have a solid understanding of programming principles, rather than just teach you how to chain together a handful of functions to do some basic data manipulations. No discipline is changing faster than data science and computational social science, so if you just learn a handful of specific commands, not only will you not be prepared to transfer your skills to new tools and applications, but you may also struggle if the commands you know change, as they surely will. By contrast, by learning these fundamental principles about *how* programming languages work, you'll develop a more robust, less \"brittle\" skill set that will provide you with a solid foundation for learning new tools over the course of your entire social science career."
   ],
   "metadata": {}
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Exercises"
   ],
   "metadata": {}
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "R",
   "language": "R",
   "name": "ir"
  },
  "language_info": {
   "name": "R",
   "codemirror_mode": "r",
   "pygments_lexer": "r",
   "mimetype": "text/x-r-source",
   "file_extension": ".r",
   "version": "4.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}